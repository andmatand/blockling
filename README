Please distribute this file with Blockman:

The source code of Blockman is available from:
http://www.billamonster.com/blockman

Blockman is free software.  It is distributed under the terms of the GNU 
General Public License:
http://www.gnu.org/copyleft/gpl.html



TABLE OF CONTENTS
=================
I.   About
II.  Controls
III. Creating Your Own Levels



I. ABOUT
========
In 1993, Doug and Larry Murk of Soleau Software <www.soleau.com> released
BLOCK-MAN 1.0.  I first played Block-man at my grandmother's house as a young
lad circa 1996.  It was included on one of those old demo CDs which would have
dozens of Shareware/Demo games on them.  Since Block-man was distributed as
"shareware", it happened to be included on one of those discs.

As I played the game, I was intrigued by its deceitfully simple gameplay;
Little blocks, innocently stacked in random piles amidst a room, radiated with
child-like playfulness; yet, as the levels progressed, the task of arranging
them in such a way as to reach the exit became a puzzle far too complex for
most grown men!

Being an avid QBasic programmer from the age of nine, I figured I'd attempt to
implement my own version of Block-man.  I did so rather succesfully, adding my
own touches such as telepads and the ability to push blocks and turn around
without walking.  These additions gave the game a somewhat different dynamic,
and I was pleased overall with the result, except for one big problem: I had
written the whole thing in QBasic.  Becuase my code was much too large for the
simple QBasic interpreter, not only was I forced to stop adding to it, but I
was unable to compile it into an executable, thus making it impossible to 
distribute to others in any practical way.  Don't use QBasic, folks (not that
anyone does anymore anyway).

Many years later, I discovered Linux (*applause*).  



II. CONTROLS
============
Esc     Menu
F1      Help (not yet implemented)
F2      Toggle Music
F3      Toggle Sound
F5      Restart the current level
U       Undo

CUSTOMIZABLE GAME CONTROLS
--------------------------
UP      Pick up a block
DOWN	Set down a block
LEFT    Move left
RIGHT   Move right
ENTER   Push a block



III. CREATING YOUR OWN LEVELS
=============================
Levels can be easily created using a simple text editor.  Perhaps the easiest
way to begin is by examining some existing levels.  The game's default levels
may be found in the "levels/default/" directory within the data directory:

  - On Unix systems, the data directory is probably "/usr/games/blockman/data/"
  - On Windows systems, this data directory is probably
    "%systemroot%\Program Files\Blockman\data\".

When examining those levels on non-Unix systems, you will need to be sure to
use a text editor capable of displaying Unix LF linebreaks.

From examining those existing levels, you will likely come to an understanding
as to the format of a level file, but I shall here offer a complete listing of
each character's meaning:

    .     Indicates a blank tile.  Plain spaces (i.e. " ") are ignored.
    @     Inidicates the player.
    X     Indicates a block.
    a-z   Lowercase letter pairs indicate telepad pairs.  These need not start
          with "a" or proceed in alphabetical order, but each letter much have
          exactly one mate (e.g. if a "q" is found, there must be another "q"
          somewhere within the level)
    *     Indicates the level's exit.
    #     Indicates that the rest of this line is a comment and will not be
          parsed.
    (LF)  A Unix linebreak indicates a new row of tiles in the level.

Additionally, note the following caveats:

  - All characters are case sensitive, thus e.g. "X" will be interpreted as a
    block, while "x" will be interpreted as a telepad.
  - A line containing no characters (except the linebreak itself) will be
    ignored.  Thus, to indicate an empty row of tiles use a "." followed by a
    linebreak.

After you have constructed a custom level, place it in the the "levels/custom"
directory within the data directory.  File names must begin with 000 and
proceed in numerical order (e.g. 000, 001, 002, etc.).

When designing a level, it can be helpful to try out your changes by playing
through the level, or simply observing how the level is being parsed by the
game.  Since the game loads levels afresh from disk each time they are
reloaded, this can be accomplished by running the game and displaying the level
upon which you are working, and reloading it whenever you save a change.  The
F5 keyboard shortcut is particularly handy for quick reloading.
